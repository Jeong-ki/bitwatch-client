---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
## Coding Preferences - Code Style & Quality Standards

### Core Principles
- **Simplicity**: Always prioritize the simplest solution over complexity
- **DRY (Don't Repeat Yourself)**: Avoid code duplication, reuse functionality
- **Organization**: Keep files under 300 lines, refactor when needed
- **Documentation**: Create `/docs/[component].md` after major component development

### Import Paths
- Always include 'src' in import paths from project root using @/ prefix
  - Correct: '@/domains/article/components/ArticleDetail'
  - Incorrect: 'src/domains/article/components/ArticleDetail'
- Use @img/ prefix for image files
  - Correct: @img/logo.png
- Use @css/ prefix for CSS files
  - Correct: @css/styles.css
- Group imports by: external → internal → types
- Keep consistent import order across files

### Domain-based Folder Structure
- Core application code resides in the 'src' directory
- Top-level folders within 'src':
  - 'api' - API communication code
  - 'app' - Application settings, routing, etc.
  - 'components' - Common UI components
  - 'constants' - Global constants
  - 'domains' - Domain-specific code
  - 'hooks' - Common React hooks
  - 'lib' - Utility libraries
  - 'store' - Global state management
  - 'testing' - Testing-related code
  - 'types' - Global type definitions
  - 'utils' - Utility functions

### Domains Folder Structure
- Each domain folder (e.g., 'domains/auth', 'domains/user') follows this structure:
  - 'components' - Domain-specific components
  - 'constants' - Domain-specific constants
  - 'hooks' - Domain-specific hooks
  - 'lib' - Domain-specific utilities
  - 'store' - Domain-specific state management
  - 'testing' - Domain-specific test code
  - 'types' - Domain-specific type definitions
  - 'utils' - Domain-specific utility functions

### Component Organization
- Common components are located in 'src/components'
- Domain-specific components are located in the respective domain's 'components' folder
- Page components focus on routing and data connections, delegating business logic to the appropriate domain
- Complex components are broken down into smaller sub-components for better management


### Code Structure
- Use functional, declarative programming (avoid classes)
- Favor composition over inheritance
- Structure files: exports → subcomponents → helpers → types
- Follow naming conventions:
  - Use descriptive names with auxiliary verbs (isLoading, handleClick)
  - Use lowercase with dashes for directories (components/auth-wizard)
  - Prefer named exports for components
- Apply RORO pattern (Receive Object, Return Object)

### JavaScript/TypeScript
- Use "function" keyword for pure functions, omit semicolons
- Prefer interfaces over types, use maps instead of enums
- Minimize conditional syntax:
  - Avoid unnecessary curly braces
  - Omit braces for single-line statements
- Always start with proper TypeScript interfaces/types

### Error Handling
- Handle errors and edge cases first (early returns)
- Place happy path last for better readability
- Avoid nested if statements and unnecessary else blocks
- Use guard clauses for preconditions
- Return errors as values in Server Actions rather than try/catch
- Create error boundaries in error.tsx and global-error.tsx files
- Services should throw user-friendly errors (for tanStackQuery)

### React Components
- Write as functions (not arrow functions stored in constants)
- Use declarative JSX
- Extract static content to variables outside render functions
- Place interfaces and types at file end
- Prioritize Server Components where possible
- Minimize 'use client' usage (only for Web API access)
- Wrap client components in Suspense with fallback 